{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useMounted.js", "../../@restart/hooks/esm/usePrevious.js", "../../@restart/hooks/esm/useIsomorphicEffect.js"],
  "sourcesContent": ["import { useRef, useEffect } from 'react';\r\n\r\n/**\r\n * Track whether a component is current mounted. Generally less preferable than\r\n * properlly canceling effects so they don't run after a component is unmounted,\r\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\r\n *\r\n * @returns a function that returns the current isMounted state of the component\r\n *\r\n * ```ts\r\n * const [data, setData] = useState(null)\r\n * const isMounted = useMounted()\r\n *\r\n * useEffect(() => {\r\n *   fetchdata().then((newData) => {\r\n *      if (isMounted()) {\r\n *        setData(newData);\r\n *      }\r\n *   })\r\n * })\r\n * ```\r\n */\r\nexport default function useMounted() {\r\n  const mounted = useRef(true);\r\n  const isMounted = useRef(() => mounted.current);\r\n  useEffect(() => {\r\n    mounted.current = true;\r\n    return () => {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n  return isMounted.current;\r\n}", "import { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Store the last of some value. Tracked via a `Ref` only updating it\r\n * after the component renders.\r\n *\r\n * Helpful if you need to compare a prop value to it's previous value during render.\r\n *\r\n * ```ts\r\n * function Component(props) {\r\n *   const lastProps = usePrevious(props)\r\n *\r\n *   if (lastProps.foo !== props.foo)\r\n *     resetValueFromProps(props.foo)\r\n * }\r\n * ```\r\n *\r\n * @param value the value to track\r\n */\r\nexport default function usePrevious(value) {\r\n  const ref = useRef(null);\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}", "import { useEffect, useLayoutEffect } from 'react';\r\nconst isReactNative = typeof global !== 'undefined' &&\r\n// @ts-ignore\r\nglobal.navigator &&\r\n// @ts-ignore\r\nglobal.navigator.product === 'ReactNative';\r\nconst isDOM = typeof document !== 'undefined';\r\n\r\n/**\r\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\r\n * Only useful to avoid the console warning.\r\n *\r\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\r\n *\r\n * @category effects\r\n */\r\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;"],
  "mappings": ";;;;;;;;AAAA,mBAAkC;AAsBnB,SAAR,aAA8B;AACnC,QAAM,cAAU,qBAAO,IAAI;AAC3B,QAAM,gBAAY,qBAAO,MAAM,QAAQ,OAAO;AAC9C,8BAAU,MAAM;AACd,YAAQ,UAAU;AAClB,WAAO,MAAM;AACX,cAAQ,UAAU;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,CAAC;AACL,SAAO,UAAU;AACnB;;;AChCA,IAAAA,gBAAkC;AAmBnB,SAAR,YAA6B,OAAO;AACzC,QAAM,UAAM,sBAAO,IAAI;AACvB,+BAAU,MAAM;AACd,QAAI,UAAU;AAAA,EAChB,CAAC;AACD,SAAO,IAAI;AACb;;;ACzBA,IAAAC,gBAA2C;AAC3C,IAAM,gBAAgB,OAAO,WAAW;AAExC,OAAO;AAEP,OAAO,UAAU,YAAY;AAC7B,IAAM,QAAQ,OAAO,aAAa;AAUlC,IAAO,8BAAQ,SAAS,gBAAgB,gCAAkB;",
  "names": ["import_react", "import_react"]
}
