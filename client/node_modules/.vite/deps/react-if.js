import {
  require_react
} from "./chunk-VMZ364YV.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/react-if/dist/react-if.esm.js
var import_react = __toESM(require_react());
var render = function render2(props) {
  if (typeof props.children === "function") {
    return import_react.default.createElement(import_react.Fragment, null, props.children());
  }
  return import_react.default.createElement(import_react.Fragment, null, props.children || null);
};
var Case = function Case2(_ref) {
  var _ref$children = _ref.children, children = _ref$children === void 0 ? null : _ref$children;
  return render({
    children
  });
};
var Default = function Default2(_ref) {
  var _ref$children = _ref.children, children = _ref$children === void 0 ? null : _ref$children;
  return render({
    children
  });
};
var Else = function Else2(props) {
  return render(props);
};
var Fallback = function Fallback2(props) {
  return render(props);
};
var getConditionResult = function getConditionResult2(condition) {
  var conditionResult = Boolean(typeof condition === "function" ? condition() : condition);
  return conditionResult;
};
function _regeneratorRuntime() {
  _regeneratorRuntime = function() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function(method, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method)
          throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method, method = delegate.iterator[methodName];
    if (void 0 === method)
      return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object = Object(val), keys = [];
    for (var key in object)
      keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object)
          return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch2 = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch2 && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch2) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function isFunction(input) {
  return typeof input === "function";
}
function hasThen(input) {
  return Reflect.has(input, "then") && isFunction(input.then);
}
function hasCatch(input) {
  return Reflect.has(input, "catch") && isFunction(input["catch"]);
}
function isThenable(input) {
  if (typeof input !== "object" || input === null)
    return false;
  return input instanceof Promise || input !== Promise.prototype && hasThen(input) && hasCatch(input);
}
var shallowArraysEqual = function shallowArraysEqual2(a, b) {
  if (!Array.isArray(a) || !Array.isArray(b))
    throw new Error("shallowArraysEqual only accepts arrays as parameters");
  if (a.length !== b.length)
    return false;
  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i])
      return false;
  }
  return true;
};
var createCancellablePromise = function createCancellablePromise2(promise) {
  if (!isThenable(promise)) {
    throw new Error("Argument of createCancellablePromise should be a Promise");
  }
  var isCancelled = {
    value: false
  };
  var wrappedPromise = new Promise(function() {
    var _ref = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(res, rej) {
      var d;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1)
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return promise;
            case 3:
              d = _context.sent;
              return _context.abrupt("return", !isCancelled.value && res(d));
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              !isCancelled.value && rej(_context.t0);
            case 10:
            case "end":
              return _context.stop();
          }
      }, _callee, null, [[0, 7]]);
    }));
    return function(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  Object.keys(promise).forEach(function(key) {
    wrappedPromise[key] = promise[key];
  });
  return {
    promise: wrappedPromise,
    cancel: function cancel() {
      isCancelled.value = true;
    }
  };
};
var useSingleton = function useSingleton2(callback, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  var hasRan = (0, import_react.useRef)(false);
  var lastDependencies = (0, import_react.useRef)([]);
  if (typeof callback !== "function") {
    throw new Error("Incorrect callback parameter for useSingleton hook; expected a function, but got: '" + typeof callback + "'.");
  }
  if (!Array.isArray(dependencies)) {
    throw new Error("Incorrect dependencies parameter for useSingleton; expected an array, but got: '" + typeof dependencies + "'.");
  }
  var hasDependencies = Array.isArray(dependencies) && dependencies.length > 0;
  if (hasDependencies) {
    var hasAnyDependencyChanged = !shallowArraysEqual(lastDependencies.current, dependencies);
    if (hasAnyDependencyChanged) {
      lastDependencies.current = dependencies;
    } else if (hasRan.current) {
      return;
    }
  } else if (hasRan.current) {
    return;
  }
  callback();
  hasRan.current = true;
};
var Then = function Then2(props) {
  return render(props);
};
function IfAsync(_ref) {
  var promise = _ref.promise, _ref$keepAlive = _ref.keepAlive, keepAlive = _ref$keepAlive === void 0 ? false : _ref$keepAlive, children = _ref.children;
  var _useState = (0, import_react.useState)(null), isResolved = _useState[0], setIsResolved = _useState[1];
  var _useState2 = (0, import_react.useState)(null), returnValue = _useState2[0], setReturnValue = _useState2[1];
  var cancellablePromise = (0, import_react.useMemo)(function() {
    return createCancellablePromise(promise);
  }, [promise]);
  var history = (0, import_react.useRef)([]);
  (0, import_react.useEffect)(function() {
    return function() {
      if (!keepAlive) {
        cancellablePromise.cancel();
      }
    };
  }, [cancellablePromise, cancellablePromise.promise, keepAlive]);
  useSingleton(_asyncToGenerator(_regeneratorRuntime().mark(function _callee() {
    var data;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            setIsResolved(null);
            setReturnValue(null);
            _context.prev = 2;
            _context.next = 5;
            return cancellablePromise.promise;
          case 5:
            data = _context.sent;
            setReturnValue(data);
            setIsResolved(true);
            history.current.push(cancellablePromise);
            _context.next = 16;
            break;
          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](2);
            setReturnValue(_context.t0);
            setIsResolved(false);
            history.current.push(cancellablePromise);
          case 16:
          case "end":
            return _context.stop();
        }
    }, _callee, null, [[2, 11]]);
  })), [cancellablePromise.promise]);
  if (!children || !isThenable(promise)) {
    return null;
  }
  if (isResolved === null) {
    var hasFallback = import_react.default.Children.toArray(children).find(function(c) {
      return c.type === Fallback;
    });
    return import_react.default.createElement(import_react.Fragment, null, hasFallback || null);
  }
  if (!isResolved) {
    var hasElse = import_react.default.Children.toArray(children).find(function(c) {
      return c.type === Else;
    });
    if (!hasElse)
      return import_react.default.createElement(import_react.Fragment, null, null);
    var elseElement = hasElse;
    if (typeof hasElse.props.children === "function") {
      elseElement = _extends({}, hasElse, {
        props: _extends({}, hasElse.props, {
          children: function children2() {
            return hasElse.props.children(returnValue, history.current, cancellablePromise.promise);
          }
        })
      });
    }
    return import_react.default.createElement(import_react.Fragment, null, elseElement);
  }
  var hasThen2 = import_react.default.Children.toArray(children).find(function(c) {
    return c.type === Then;
  });
  if (!hasThen2)
    return import_react.default.createElement(import_react.Fragment, null, null);
  var thenElement = hasThen2;
  if (typeof hasThen2.props.children === "function") {
    thenElement = _extends({}, hasThen2, {
      props: _extends({}, hasThen2.props, {
        children: function children2() {
          return hasThen2.props.children(returnValue, history.current, cancellablePromise.promise);
        }
      })
    });
  }
  return import_react.default.createElement(import_react.Fragment, null, thenElement);
}
function tinyWarning(condition, message) {
  if (true) {
    if (condition) {
      if (typeof console !== "undefined") {
        console.warn(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    }
  }
}
var If = function If2(_ref) {
  var condition = _ref.condition, _ref$keepAlive = _ref.keepAlive, keepAlive = _ref$keepAlive === void 0 ? false : _ref$keepAlive, children = _ref.children;
  if (!children) {
    return null;
  }
  tinyWarning(!Array.isArray(children) && !(children.type === Else || children.type === Then) || !import_react.default.Children.toArray(children).every(function(child) {
    return child.type === Else || child.type === Then || child.type === Fallback;
  }), "The <If> component should contain <Then /> <Else /> or <Fallback /> components as its children");
  if (isThenable(condition)) {
    return import_react.default.createElement(IfAsync, {
      promise: condition,
      keepAlive
    }, children);
  }
  var conditionResult = getConditionResult(condition);
  return import_react.default.createElement(import_react.Fragment, null, import_react.default.Children.toArray(children).find(function(c) {
    return c.type !== Else !== !conditionResult;
  }) || null);
};
var Switch = function Switch2(_ref) {
  var _ref2, _matchingCase;
  var children = _ref.children;
  var matchingCase = void 0;
  var defaultCase = void 0;
  if (isFunction(children)) {
    children = children();
  }
  import_react.default.Children.forEach(children, function(child) {
    if (!import_react.default.isValidElement(child)) {
      return;
    }
    if (!matchingCase && child.type === Case) {
      var condition = child.props.condition;
      var conditionResult = getConditionResult(condition);
      if (conditionResult) {
        matchingCase = child;
      }
    } else if (!defaultCase && child.type === Default) {
      defaultCase = child;
    }
  });
  return (_ref2 = (_matchingCase = matchingCase) != null ? _matchingCase : defaultCase) != null ? _ref2 : null;
};
var Unless = function Unless2(_ref) {
  var condition = _ref.condition, _ref$children = _ref.children, children = _ref$children === void 0 ? null : _ref$children;
  var conditionResult = Boolean(getConditionResult(condition));
  return !conditionResult && children ? render({
    children
  }) : null;
};
var When = function When2(_ref) {
  var condition = _ref.condition, _ref$children = _ref.children, children = _ref$children === void 0 ? null : _ref$children;
  var conditionResult = Boolean(getConditionResult(condition));
  return conditionResult && children ? render({
    children
  }) : null;
};
export {
  Case,
  Default,
  Else,
  Fallback,
  If,
  Switch,
  Then,
  Unless,
  When
};
//# sourceMappingURL=react-if.js.map
